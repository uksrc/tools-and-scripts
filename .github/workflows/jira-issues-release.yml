name: Create Release for the Create Jira Issues Script on Version Update

on:
  push:
    branches: [main, master]
    paths:
      - "jira-issues/pyproject.toml"

jobs:
  check-version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch current and previous commit to compare

      - name: Get current version
        id: current_version
        run: |
          version=$(grep '^version = ' jira-issues/pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Current version: $version"

      - name: Get previous version
        id: previous_version
        run: |
          # Get the version from the previous commit
          git show HEAD~1:jira-issues/pyproject.toml > previous_pyproject.toml || echo 'version = "0.0.0"' > previous_pyproject.toml
          prev_version=$(grep '^version = ' previous_pyproject.toml | sed 's/version = "\(.*\)"/\1/' || echo "0.0.0")
          echo "prev_version=$prev_version" >> $GITHUB_OUTPUT
          echo "Previous version: $prev_version"

      - name: Check if version changed
        id: version_check
        run: |
          if [ "${{ steps.current_version.outputs.version }}" != "${{ steps.previous_version.outputs.prev_version }}" ]; then
            echo "Version changed from ${{ steps.previous_version.outputs.prev_version }} to ${{ steps.current_version.outputs.version }}"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release archive
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          # Create the tar.gz file, excluding the resources directory
          tar --exclude='jira-issues/resources' -czf "create-jira-issues-script-v${{ steps.current_version.outputs.version }}.tar.gz" jira-issues/

          # List contents for verification
          echo "Archive contents:"
          tar -tzf "create-jira-issues-script-v${{ steps.current_version.outputs.version }}.tar.gz"

      - name: Check if tag exists
        if: steps.version_check.outputs.version_changed == 'true'
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.current_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.current_version.outputs.version }} already exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${{ steps.current_version.outputs.version }} does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.version_check.outputs.version_changed == 'true' && steps.tag_check.outputs.tag_exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          release_name: Create Jira Issues Script v${{ steps.current_version.outputs.version }}
          body: |
            ## Create Jira Issues Script v${{ steps.current_version.outputs.version }}

            This release contains the Create Jira Issues Script for automating Jira issue creation from CSV files.

            ### Contents

            - `create-jira-issues.py` - Main script for creating Jira issues
            - `setup-mac.sh` - Setup script for macOS
            - `pyproject.toml` - Project configuration
            - `uv.lock` - Dependency lock file
            - `README.md` - Documentation

            ### Usage

            1. Download the `create-jira-issues-script-v${{ steps.current_version.outputs.version }}.tar.gz` archive.
            2. Extract:

                `tar -xzf create-jira-issues-script-v${{ steps.current_version.outputs.version }}.tar.gz`

              Or use 7-Zip, WinRAR, or similar tool that supports tar.gz

            3. Follow setup and usage instructions in the `README.md`.

          draft: false
          prerelease: false
        id: create_release

      - name: Upload Release Asset
        if: steps.version_check.outputs.version_changed == 'true' && steps.tag_check.outputs.tag_exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./create-jira-issues-script-v${{ steps.current_version.outputs.version }}.tar.gz
          asset_name: create-jira-issues-script-v${{ steps.current_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip
